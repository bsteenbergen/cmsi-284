

Evaluation Criteria ~ homework06
CMSI 284 Section 01 Spring 2021
=================================

FINDGCD.NASM
   assembles            [5 pts.] 5 points earned
   runs                 [5 pts.] 5 points earned
   output correct       [2 pts.] 0 points earned
GCDFINDER
   nasm file assembles  [5 pts.] 5 points earned
   gcdFinder.c compiles [5 pts.] 5 points earned
   link both files      [5 pts.] 5 points earned
   nasm returns value   [5 pts.] 5 points earned
   output correct       [2 pts.] 0 points earned
PARITYGEN
   nasm assembles       [5 pts.] 5 points earned
   nasm links           [5 pts.] 5 points earned
   nasm runs            [5 pts.] 5 points earned
   output correct       [2 pts.] 2 points earned
WHICHENDISUP
   compiles no errors   [5 pts.] 5 points earned
   runs no errors       [5 pts.] 5 points earned
MAKENBOC.C
   compiles no errors   [5 pts.] 5 points earned
   uses previous func.  [5 pts.] 5 points earned
   tester compiles      [5 pts.] 5 points earned
   tester runs          [5 pts.] 0 points earned
   output correct       [2 pts.] 0 points earned
MAKENBO.NASM
   assembles            [5 pts.] 5 points earned
   link both files      [5 pts.] 5 points earned
   calls "C" function   [5 pts.] 5 points earned
   output correct       [2 pts.] 0 points earned

Total possible points 100

========================================================

TOTAL EARNED POINTS:
   you earned 87.00/100.00 which is 87% which is a B-plus

========================================================
SPECIFIC COMMENTS/FEEDBACK:

Problem #1 assembles and links, but I get a seg fault: 11 error.  Still, you
earn most of the credit for this one.

Problem #2, assembles, compiles, and links just fine.  Your 'nasm' code is
calling the "C" function and it returns a value.  Unfortunately, the value
isn't correct.  When I run it I get back that the GCD is 32, but the assert
call traps and aborts on the correct value of "8".  Still, you earn most of
the credit here as well.

Problems #3 and #4 run fine, with the exception of the whichEndIsUp function
waits for user input.  You DON'T want that to happen, since you actually
would like it to just return a boolean value that is true one way or another
for little-endian/big-endian.  Your pick.   Full credit anyhow.

Problem #5, the makeNBOC.c file compiles, but when I try to link it with its
tester, I get a warning about the unsigned int vs. uint64_t type mismatch.
I then get an error because the linker is seeing duplicate symbols.  You do
earn some credit for this one.

Problem #6, the files assemble, compile, and link fine.  When I run it, the
program seg fault's.  You earn most of the credit for this one.


========================================================
SEMESTER HOMEWORK TOTALS:

   homework01 ~ 100.00% of  5 points =  5.00 points
   homework02 ~  92.50% of  5 points =  4.63 points
   homework03 ~  96.74% of  5 points =  4.84 points
   homework04 ~  86.67% of  5 points =  4.33 points
   homework05 ~  87.00% of 10 points =  8.70 points
   homework06 ~  87.00% of 15 points = 13.05 points
                       semester total: 40.55 out of 45.00 = 90.11%
                             which is an A-minus

Great work!
